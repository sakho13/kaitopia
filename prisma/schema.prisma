// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ************ MODELS ************

model User {
  id String @id @default(cuid(2))

  firebaseUid String  @unique @map("firebase_uid")
  isGuest     Boolean @default(false) @map("is_guest")

  role Role @default(USER) @map("role")

  name         String    @map("name")
  birthDayDate DateTime? @map("birth_day_date")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  ownerSchools SchoolOwner[]
  // memberSchools SchoolMember[]
  SchoolMember SchoolMember[]
}

model School {
  id String @id @default(cuid(2))

  name         String  @map("name")
  description  String  @map("description")
  // isSelfSchool ユーザが必ず所属するSchoolを識別する
  isSelfSchool Boolean @default(false) @map("is_self_school")
  // isPublic 公開しているがどうが(条件有無は無関係)
  isPublic     Boolean @default(false) @map("is_public")
  // isGlobal グローバルな学校(全ユーザが参加できる)
  isGlobal     Boolean @default(false) @map("is_global")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  question Question[]
  exercise Exercise[]

  owners  SchoolOwner[]
  members SchoolMember[]
}

model SchoolOwner {
  schoolId String @map("school_id")
  userId   String @map("user_id")

  createdAt DateTime @default(now()) @map("created_at")
  // priority 学校のオーナーの優先度(0が一番高い)
  priority  Int      @default(0) @map("priority")

  school School @relation(fields: [schoolId], references: [id])
  owner  User   @relation(fields: [userId], references: [id])

  @@id([schoolId, userId])
}

model SchoolMember {
  schoolId String @map("school_id")
  userId   String @map("user_id")

  // 利用期限 nullの場合は期限なし
  limitAt DateTime?

  createdAt DateTime @default(now()) @map("created_at")

  school School @relation(fields: [schoolId], references: [id])
  member User   @relation(fields: [userId], references: [id])

  @@id([schoolId, userId])
}

model Question {
  id       String @id @default(cuid(2))
  schoolId String @map("school_id")

  title        String       @map("title")
  questionType QuestionType @map("question_type")
  answerType   AnswerType   @map("answer_type")

  currentVersionId Int? @map("current_version") // 現在公開中のバージョン
  draftVersionId   Int? @map("draft_version") // 編集中のバージョン

  isPublished Boolean   @default(false) @map("is_published")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  school            School             @relation(fields: [schoolId], references: [id])
  versions          QuestionVersion[]
  currentVersion    QuestionVersion?   @relation("CurrentVersion", fields: [id, currentVersionId], references: [questionId, version])
  draftVersion      QuestionVersion?   @relation("DraftVersion", fields: [id, draftVersionId], references: [questionId, version])
  exerciseQuestions ExerciseQuestion[]

  @@unique([id, currentVersionId], name: "question_current_version")
  @@unique([id, draftVersionId], name: "question_draft_version")
}

model QuestionVersion {
  questionId String @map("question_id")
  version    Int    @default(1) @map("version")

  content String @map("content")
  hint    String @default("") @map("hint") // ヒント

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  question Question @relation(fields: [questionId], references: [id])

  currentQuestion Question?        @relation("CurrentVersion")
  draftQuestion   Question?        @relation("DraftVersion")
  questionAnswers QuestionAnswer[]
  answerLogs      AnswerLog[]

  @@id([questionId, version])
}

model QuestionAnswer {
  questionId String @map("question_id")
  version    Int    @map("version")
  // QuestionTypeがTEXTの場合は1のみ
  answerId   Int    @default(1) @map("answer_id")

  // QuestionTypeがSELECT/MULTI_SELECTの場合
  selectContent String?  @map("select_content") // 選択肢の内容
  isCorrect     Boolean? @default(false) @map("is_correct") // 正解かどうか

  // QuestionTypeがTEXTの場合
  minLength Int? @map("min_length") // 最小文字数
  maxLength Int? @map("max_length") // 最大文字数

  questionVersion QuestionVersion @relation(fields: [questionId, version], references: [questionId, version])

  @@id([questionId, version, answerId])
}

model Exercise {
  id       String @id @default(cuid(2))
  schoolId String @map("school_id")

  title       String @map("title")
  description String @default("") @map("description")

  isCanSkip      Boolean @default(false) @map("is_can_skip") // スキップ可能かどうか
  isScoringBatch Boolean @default(false) @map("is_scoring_batch") // 一括採点可能かどうか

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  school            School             @relation(fields: [schoolId], references: [id])
  exerciseQuestions ExerciseQuestion[]
  answerLogSheet    AnswerLogSheet[]
}

model ExerciseQuestion {
  exerciseId String @map("exercise_id")
  questionId String @map("question_id")

  createdAt DateTime @default(now()) @map("created_at")

  exercise Exercise @relation(fields: [exerciseId], references: [id])
  question Question @relation(fields: [questionId], references: [id])

  @@id([exerciseId, questionId])
}

// AnswerLogSheet あらゆるQuestionの回答記録のマスター
// いわゆる回答用紙
model AnswerLogSheet {
  userId           String @map("user_id")
  answerLogSheetId String @default(cuid(2))

  isInProgress Boolean @default(false) @map("is_in_progress") // 回答途中かどうか

  // 合計正解数
  // QuestionTypeがSELECT/MULTI_SELECTのみ集計
  totalCorrectCount    Int @default(0) @map("total_correct_count")
  // 合計不正解数
  // QuestionTypeがSELECT/MULTI_SELECTのみ集計
  totalIncorrectCount  Int @default(0) @map("total_incorrect_count")
  // 合計未回答数
  totalUnansweredCount Int @default(0) @map("total_unanswered_count")

  // 問題集から回答された時
  exerciseId String? @map("exercise_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  exercise   Exercise?   @relation(fields: [exerciseId], references: [id])
  answerLogs AnswerLog[]

  @@id([userId, answerLogSheetId])
}

model AnswerLog {
  userId           String @map("user_id")
  answerLogSheetId String @map("answer_log_sheet_id")
  questionId       String @map("question_id")
  version          Int    @map("version")

  wasSkipped Boolean @default(false) @map("was_skipped") // スキップされたかどうか

  // QuestionTypeがSELECT/MULTI_SELECTの場合
  selectContent String?  @map("select_content") // 選択肢の answerId (MULTI_SELECTの場合はカンマ区切り)
  isCorrect     Boolean? @default(false) @map("is_correct") // 正解かどうか

  // QuestionTypeがTEXTの場合
  textContent String? @map("text_content") // 回答の内容

  // スコア
  // QuestionTypeがSELECT/MULTI_SELECTの場合は正解が100点
  // QuestionTypeがTEXTの場合は内容によって変わる
  // 0点から100点の間でスコアをつける
  score Int @default(0) @map("score")

  createdAt DateTime @default(now()) @map("created_at")

  questionVersion QuestionVersion @relation(fields: [questionId, version], references: [questionId, version])
  answerLogSheet  AnswerLogSheet  @relation(fields: [userId, answerLogSheetId], references: [userId, answerLogSheetId])

  @@id([userId, answerLogSheetId, questionId, version])
}

// ************ MODELS ************

// ************ ENUMS ************

enum Role {
  USER // default
  MODERATOR // upgrade from USER
  TEACHER // upgrade from MODERATOR

  ADMIN // developer
}

/**
 * 問題の種類
 * TEXT: 文章題 (文章がメインの問題)
 * IMAGE: 画像問題 (画像がメインの問題 説明用の文章もある)
 * VIDEO: 動画問題 (動画がメインの問題 説明用の文章もある)
 * AUDIO: 音声問題 (音声がメインの問題 説明用の文章もある)
 * XXXXX: 虫食い問題
 */
enum QuestionType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
}

/**
 * 回答の種類
 * SELECT: 選択肢回答 (選択肢から1つ選ぶ)
 * MULTI_SELECT: 複数選択肢回答 (選択肢から複数選ぶ)
 * TEXT: 文章回答 (文章がメインの回答)
 */
enum AnswerType {
  SELECT
  MULTI_SELECT
  TEXT
}

// ************ ENUMS ************
