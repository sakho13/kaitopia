generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ************ MODELS ************

// model UserAuthProvider {
//   userId   String          @map("user_id")
//   provider UserSSOProvider @map("provider")

//   email String? @map("email")

//   createdAt DateTime @default(now()) @map("created_at")

//   user User @relation(fields: [userId], references: [id])

//   @@id([userId, provider])
// }

model Question {
  id       String @id @default(cuid(2))
  schoolId String @map("school_id")

  title        String       @map("title")
  questionType QuestionType @map("question_type")
  answerType   AnswerType   @map("answer_type")

  currentVersionId Int? @map("current_version") // 現在公開中のバージョン
  draftVersionId   Int? @map("draft_version") // 編集中のバージョン

  isPublished Boolean   @default(false) @map("is_published")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  school                 School                  @relation(fields: [schoolId], references: [id])
  versions               QuestionVersion[]
  currentVersion         QuestionVersion?        @relation("CurrentVersion", fields: [id, currentVersionId], references: [questionId, version])
  draftVersion           QuestionVersion?        @relation("DraftVersion", fields: [id, draftVersionId], references: [questionId, version])
  exerciseQuestions      ExerciseQuestion[]
  questionGroupQuestions QuestionGroupQuestion[]

  @@unique([id, currentVersionId], name: "question_current_version")
  @@unique([id, draftVersionId], name: "question_draft_version")
}

model QuestionVersion {
  questionId String @map("question_id")
  version    Int    @default(1) @map("version")

  content String @map("content")
  hint    String @default("") @map("hint") // ヒント

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  question Question @relation(fields: [questionId], references: [id])

  currentQuestion Question?         @relation("CurrentVersion")
  draftQuestion   Question?         @relation("DraftVersion")
  questionAnswers QuestionAnswer[]
  questionUserLog QuestionUserLog[]

  @@id([questionId, version])
}

model QuestionAnswer {
  questionId String @map("question_id")
  version    Int    @map("version")
  // QuestionTypeがTEXTの場合は1のみ
  answerId   String @default(cuid(2)) @map("answer_id")

  // QuestionTypeがSELECT/MULTI_SELECTの場合
  selectContent String?  @map("select_content") // 選択肢の内容
  isCorrect     Boolean? @default(false) @map("is_correct") // 正解かどうか

  // QuestionTypeがTEXTの場合
  minLength Int? @map("min_length") // 最小文字数
  maxLength Int? @map("max_length") // 最大文字数

  questionVersion     QuestionVersion       @relation(fields: [questionId, version], references: [questionId, version])
  answerSelectUserLog AnswerSelectUserLog[]

  @@id([questionId, version, answerId])
}

model QuestionGroup {
  schoolId        String @map("school_id")
  questionGroupId String @default(cuid(2)) @map("question_group_id")
  name            String @map("name")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  school                 School                  @relation(fields: [schoolId], references: [id])
  questionGroupQuestions QuestionGroupQuestion[]

  @@id([schoolId, questionGroupId])
}

model QuestionGroupQuestion {
  schoolId        String @map("school_id")
  questionGroupId String @map("question_group_id")
  questionId      String @map("question_id")

  createdAt DateTime @default(now()) @map("created_at")

  questionGroup QuestionGroup @relation(fields: [schoolId, questionGroupId], references: [schoolId, questionGroupId])
  question      Question      @relation(fields: [questionId], references: [id])

  @@id([schoolId, questionGroupId, questionId])
}

// ************ MODELS ************

// ************ ENUMS ************

// enum UserSSOProvider {
//   EMAIL
//   GITHUB
//   GOOGLE
// }

/**
 * 問題の種類
 * TEXT: 文章題 (文章がメインの問題)
 * IMAGE: 画像問題 (画像がメインの問題 説明用の文章もある)
 * VIDEO: 動画問題 (動画がメインの問題 説明用の文章もある)
 * AUDIO: 音声問題 (音声がメインの問題 説明用の文章もある)
 * XXXXX: 虫食い問題
 */
enum QuestionType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
}

/**
 * 回答の種類
 * SELECT: 選択肢回答 (選択肢から1つ選ぶ)
 * MULTI_SELECT: 複数選択肢回答 (選択肢から複数選ぶ)
 * TEXT: 文章回答 (文章がメインの回答)
 */
enum AnswerType {
  SELECT
  MULTI_SELECT
  TEXT
}

// ************ ENUMS ************
